module DA.Text.Darsec.Prim
  ( many
  , many1
  , scan
  , parse
  , skipMany
  , skipMany1
  , try'
  , Parser(..)
  , Reply(..)
  , Consumed(..)
  )
where

import           Prelude                       as P
                                         hiding ( takeWhile )
import           DA.MonadPlus
import           DA.Alternative
import           DA.Action                      ( void )

newtype Parser s = Parser
  { unP : Text -> Consumed s }

data Consumed a = Consumed (Reply a) | Empty (Reply a) deriving (Show, Eq)

data Reply a = Ok {result  : a, remain :  Text} | Error deriving (Show, Eq)

instance (Monoid a) => Monoid (Reply a) where
  mempty = Ok mempty ""

instance Semigroup a => Semigroup (Reply a) where
  (Ok r1 _) <> (Ok r2 rem) = Ok (r1 <> r2) rem
  Error <> Error = Error
  (Ok _ _) <> Error = Error
  Error <> (Ok _ _)  = Error

instance Semigroup a => Semigroup (Consumed a) where
  (Consumed a) <> (Consumed b) = Consumed (a <> b)
  (Consumed a) <> (Empty _) = Consumed a
  (Empty a) <> (Consumed _) = Empty a
  (Empty a) <> (Empty b)= Empty $ a <> b

returnP : s -> Parser s
returnP x = Parser $ \input -> Empty (Ok x input)

many : (Alternative f, Action f) => f a -> f [a]
many p = scan p identity

scan : (Alternative f, Action f) => f a1 -> ([a1] -> a2) -> f a2
scan p f =
  do
      x <- p
      scan p (\tail -> f (x :: tail))
    <|> return (f [])

many1 : Parser a -> Parser [a]
many1 p = do
    x <- p;
    xs <- many1 p <|> return []
    return (x::xs)

skipMany : Parser a -> Parser()
skipMany = void . many

skipMany1 : Parser a -> Parser ()
skipMany1 = void . many1

bind: Parser a -> (a -> Parser b) -> Parser b
bind pb f = Parser $ \input -> case p input of
  Empty reply1 -> case reply1 of
    Ok x rest -> unP (f x) rest
    Error     -> Empty Error
  Consumed reply1 -> Consumed
    (case reply1 of
      Ok x rest -> case unP (f x) rest of
        Consumed reply2 -> reply2
        Empty    reply2 -> reply2
      e12 -> Error
    )
  where p = unP pb

instance Monoid a => Semigroup (Parser a) where

    -- | Combines two parsers like '*>', '>>' and @do {...;...}@
    --  /but/ also combines their results with (<>) instead of
    --  discarding the first.
    p1 <> p2 = Parser \i -> case unP p1 i of
       Consumed r1@(Ok _ rem) -> Consumed $ r1 <>
         (case unP p2 rem of
          Consumed r2@(Ok _ _) -> r2
          Consumed Error ->  Error
          Empty _ -> mempty)
       Empty r1@(Ok _ rem) -> Consumed $ r1 <>
         (case unP p2 rem of
          Consumed r2@(Ok _ _) -> r2
          Consumed Error ->  Error
          Empty _ -> mempty)
       Consumed Error -> Consumed Error
       Empty Error -> Empty Error

instance Applicative Parser where
    pure = returnP
    (<*>) = ap
    p1 *> p2 = p1 `bind` const p2
    p1 <* p2 = do { x1 <- p1 ; void p2 ; return x1 }

instance Action Parser where
 (>>=) = bind

instance MonadPlus Parser where
    mzero = parserZero
    mplus p1 p2 = parserPlus p1 p2

parserPlus : Parser a -> Parser a -> Parser a
parserPlus p q = Parser $ \input -> case unP p input of
  Empty Error -> unP q input
  Empty ok    -> case unP q input of
    Empty _  -> Empty ok
    consumed -> consumed
  consumed -> consumed

parserZero : Parser s
parserZero = Parser $ const (Empty Error)

instance Alternative Parser where
    empty = mzero
    (<|>) = mplus

parse : Parser a -> Text -> Optional (a, Text)
parse p inp = case unP p inp of
  Consumed (Ok a b) -> Some (a, b)
  Consumed Error      -> None
  Empty    (Ok a b) -> Some (a, b)
  Empty    Error      -> None

try' : Parser a -> Parser a
try' p = Parser $ \input -> case unP p input of
                      Consumed Error -> Empty Error
                      other -> other

deriving instance Functor Parser
deriving instance Functor Consumed
deriving instance Functor Reply
