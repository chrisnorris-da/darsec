module DA.Text.Darsec.Combinator
    ( choice'
    , between
    , skipMany1
    , skipMany
    , many1
    , sepBy, sepBy1
    , endBy, endBy1
    , sepEndBy
    , sepEndBy1
    , notFollowedBy
    )
    where

import           DA.Text.Darsec.Prim
import           DA.MonadPlus
import           DA.Alternative

-- | @choice ps@ tries to apply the parsers in the list @ps@ in order,
-- until one of them succeeds. Returns the value of the succeeding
-- parser.

choice' : MonadPlus f => [f a] -> f a
choice' = foldr (<|>) mzero

-- | @sepBy1 p sep@ parses /one/ or more occurrences of @p@, separated
-- by @sep@. Returns a list of values returned by @p@.

sepBy1 : (Action f, Alternative f) => f a1 -> f a2 -> f [a1]
sepBy1 p sep = do{ x <- p
                 ; xs <- many (sep >> p)
                 ; return (x::xs)
                 }
-- | @sepBy p sep@ parses /zero/ or more occurrences of @p@, separated
-- by @sep@. Returns a list of values returned by @p@.

sepBy : Parser a1 -> Parser a2 -> Parser [a1]
sepBy p sep = sepBy1 p sep <|> return []

-- | @notFollowedBy p@ only succeeds when parser @p@ fails. This parser
-- does not consume any input.

notFollowedBy : Parser () -> Parser ()
notFollowedBy p = try' (try' p <|> return ())

-- | @between open close p@ parses @open@, followed by @p@ and @close@.
-- Returns the value returned by @p@.

between : Parser a1 -> Parser a2 -> Parser b -> Parser b
between open close p = do { _ <- open; x <- p; _ <- close; return x }

-- | @sepEndBy1 p sep@ parses /one/ or more occurrences of @p@,
-- separated and optionally ended by @sep@. Returns a list of values
-- returned by @p@.

sepEndBy1 : Parser a1 -> Parser a2 -> Parser [a1]
sepEndBy1 p sep = do
  x <- p
  do
      _  <- sep
      xs <- sepEndBy p sep
      return (x :: xs)
    <|> return [x]

-- | @sepEndBy p sep@ parses /zero/ or more occurrences of @p@,
-- separated and optionally ended by @sep@, ie. haskell style
-- statements. Returns a list of values returned by @p@.

sepEndBy : Parser a1 -> Parser a2 -> Parser [a1]
sepEndBy p sep      = sepEndBy1 p sep <|> return []

-- | @endBy1 p sep@ parses /one/ or more occurrences of @p@, separated
-- and ended by @sep@. Returns a list of values returned by @p@.

endBy1 : Parser a1 -> Parser a2 -> Parser [a1]
endBy1 p sep        = many1 (do{ x <- p; _ <- sep; return x })

-- | @endBy p sep@ parses /zero/ or more occurrences of @p@, separated
-- and ended by @sep@. Returns a list of values returned by @p@.

endBy : Parser a1 -> Parser a2 -> Parser [a1]
endBy p sep         = many (do{ x <- p; _ <- sep; return x })
