module DA.Text.Test
  ( testCsv
  , testChar
  , testCombinators
  ) where

import           DA.Assert                      ( (===) )
import           DA.Text.Darsec                as D
import           DA.Text                        ( implode )

import           Daml.Script

import           Prelude                 hiding ( takeWhile )

import           DA.Optional                    ( catOptionals )
import           DA.Foldable                    ( forA_ )

vowels : Text
vowels =  "aeiou"

vowel : Parser Text
vowel = oneOf vowels

word : Parser [Text]
word = many1 letter

identifier : Parser [Text]
identifier = many1 (letter <|> digit <|> char "_")

eol : Parser Text
eol = char "\n"

csvFile : Parser [[Text]]
csvFile = many line

line : Parser [Text]
line =
    do result <- cells
       eol
       pure result

cells : Parser [Text]
cells =
    do first <- implode <$> cellContent
       next <- remainingCells
       pure (first :: next)

remainingCells : Parser [Text]
remainingCells = (char "," >> cells) <|> pure []

cellContent : Parser [Text]
cellContent =
    many (noneOf ",\n")

domain : Parser [Text]
domain = do
  many1 letter
  char "@"
  domain <- many1 letter
  string ".com"
  pure domain

testCsv = script $ do
  let (Some (parsedCsv,_)) = parse csvFile "Login email,Identifier,One-time password,Recovery code,First name,Last name,Department,Location\nrachel@example.com,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester\nlaura@example.com,2070,04ap67,lg2070,Laura,Grey,Depot,London\ncraig@example.com,4081,30no86,cj4081,Craig,Johnson,Depot,London\nmary@example.com,9346,14ju73,mj9346,Mary,Jenkins,Engineering,Manchester\njamie@example.com,5079,09ja61,js5079,Jamie,Smith,Engineering,Manchester\n"
  forA_ (drop 1 parsedCsv) $
    assert . all (== "example")
     <$>
    pure . implode . concatMap fst . catOptionals . (parse domain <$>)

testCombinators : Script ()
testCombinators = script $ do

-- choice'
  parse do { many1 $ choice' [digit, char "-"] } "-11--1+2"
   === Some (["-","1","1","-","-","1"],"+2")

-- between
  parse do { between (char "(") (char ")") (many1 digit) } "(123)"
    === Some (["1","2","3"],"")

-- skipMany
  parse do { skipMany digit } "abcde"
   === Some ((),"abcde")

-- skipMany1
  parse do { skipMany1 digit } "abcde" === None

-- many
  parse do { many digit } "abcde" === Some ([],"abcde")

-- many1
  parse do { many1 digit } "abcde" === None

-- sepBy
  parse do { many1 digit `sepBy` char "-" } "12-34-56"
   ===   Some ([["1","2"],["3","4"],["5","6"]],"")

-- sepBy1
  parse do { many1 digit `sepBy1` char "-" } "" === None

-- sepEndBy1
  parse do { many1 digit `sepEndBy1` char "-" } "-" === None
  parse do { many1 digit `sepEndBy1` char "-" } "12-21-"
   ===   Some ([["1","2"],["2","1"]],"")

-- sepEndBy
  parse do { many1 digit `sepEndBy` char "-" } "-" === Some ([],"-")
  parse do { many1 digit `sepEndBy` char "-" } "-" === Some ([],"-")

-- endBy1
  parse do { many1 digit `endBy1` char "-" } "123-"
   === Some ([["1","2","3"]],"")
  parse do { many1 digit `endBy1` char "-" } ""
   === None

-- endBy
  parse do { many1 digit `endBy` char "-" } ""
   === Some ([],"")

testChar : Script ()
testChar = script $ do

-- oneOf
  parse do { many1 $ oneOf "en" } "end99"
   === Some (["e","n"],"d99")

-- noneOf
  parse do { many1 $ noneOf "en" } "99end"
   === Some (["9","9"],"end")

  parse do { many $ noneOf vowels } "xyza"
   === Some (["x","y","z"],"a")

-- spaces(s)
  parse do { sepBy1 digit spaces} "1 2  3    4"
   ===   Some (["1","2","3","4"],"")
  parse do { sepBy1 digit space} "1 2 3 4"
   ===  Some (["1","2","3","4"],"")

-- newline
  parse (sepBy1 digit space `sepBy1` newline) "3 2 1\n1 2 3"
   === Some ([["3","2","1"],["1","2","3"]],"")

-- crlf
  parse (sepBy1 digit space >> crlf) "1 2 3\r\n"
   === Some ("\n","")

  parse (many digit `sepBy1` crlf) "123\r\n456"
   === Some ([["1","2","3"],["4","5","6"]],"")

  parse (many digit `sepBy1` crlf) "1113\n456"
   === Some ([["1","1","1","3"]],"\n456")

-- endOfLine
  parse (sepBy1 digit space >> endOfLine) "1 2 3\r\n"
   === Some ("\n","")

  parse (many digit `sepBy1` endOfLine) "123\r\n456"
   === Some ([["1","2","3"],["4","5","6"]],"")

  parse (many digit `sepBy1` endOfLine) "123\n456"
   === Some ([["1","2","3"],["4","5","6"]],"")

-- tab
  parse (many digit `sepBy1` tab) "123\t456"
   === Some ([["1","2","3"],["4","5","6"]],"")

-- upper
  parse (many digit `sepBy1` upper) "123A456B789"
   === Some ([["1","2","3"],["4","5","6"],["7","8","9"]],"")

-- lower
  parse (many digit `sepBy1` lower) "123a456b789"
   === Some ([["1","2","3"],["4","5","6"],["7","8","9"]],"")

-- alphaNum
  parse (many (alphaNum <|> char "+") `sepBy1` space) "12+3a+45 6b7+89"
   === Some ([["1","2","+","3","a","+","4","5"],["6","b","7","+","8","9"]],"")

-- letter
  parse (many (letter <|> char "+") `sepBy1` space) "ab+ab+ AbC"
   === Some ([["a","b","+","a","b","+"],["A","b","C"]],"")

-- digit
  parse (many1 digit) "12+12" === Some (["1","2"],"+12")

-- char
  parse (char "a") "aabb" === Some ("a","abb")
  parse (char "aa") "aabb" === None

-- anyChar
  parse (many1 anyChar) "abc123\n\t\r"
    ===   Some (["a","b","c","1","2","3","\n","\t","\r"],"")

-- string
  parse do { (string "second"<|> string "first") `sepBy` char "-" } "first-second-first-first"
   ===  Some ([["f","i","r","s","t"],["s","e","c","o","n","d"],["f","i","r","s","t"],["f","i","r","s","t"]],"")

-- takeWhile
  parse do { takeWhile (== ".")} "..OneTwo" === Some ([".","."],"OneTwo")

-- monad and applicative discard first successful result
  parse (many (char "c") >> many (char "b")) "cccbbdd"
   === parse (many (char "c") *> many (char "b")) "cccbbdd"

-- monoid collects the results and uses <>
  parse (many1 (char "a") <> many (char "b") <> many (char "c")) "aabbcc end"
   ===   Some (["a","a","b","b","c","c"]," end")


